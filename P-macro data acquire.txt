import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import requests

url = 'http://dataservices.imf.org/REST/SDMX_JSON.svc/'

# --------------CPI % YoY - Active

# key = 'CompactData/IFS/M.VN.PCPI_PC_CP_A_PT' # adjust codes here
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#              for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN CPI rate'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')

# --------------Unemployment Quarterly %

# # key = 'CompactData/IFS/Q.VN.LUR_PT' # unemployment percent
# key = 'CompactData/IFS/Q.VN.LU_PE_NUM' # number of unemployment
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN Unemployment rate'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')

# # --------------GDP growth rate YoY - Active

# key = 'CompactData/IFS/A.VN.NGDP_D_IX' # GDP INDEX
# # key = 'CompactData/IFS/A.VN.NGDP_R_XDC' # GDP Real amount VND
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')

# # calculate simple returns
# df = df.reset_index('date')
# df.dropna(subset=["value"], inplace=True)
# df.sort_values('date', inplace=True)
# df["growth_rate"] = df["value"].pct_change()
# # print(df)
# title = f'VN GDP growth rate'
# df_growth = df.drop("value", axis=1)
# df_growth = df_growth.set_index('date')
# print(df_growth)
# source = 'Source: IMF IFS'
# plot = df_growth.plot(title=title, colormap='Set1')

# --------------Balance of Payments - Active

# key = 'CompactData/IFS/A.VN.BFDLEXF_BP6_USD' # Balance of Payments
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN Balance of payment'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')


# --------------VNDUSD rate - Active

# key = 'CompactData/IFS/M.VN.ENDA_XDC_USD_RATE' # VNDUSD rate
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN VNDUSD rate'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')


# --------------Export AMT - Active

key = 'CompactData/IFS/A.VN.NX_R_XDC' # Export real amount VND
data = (requests.get(f'{url}{key}').json()
        ['CompactData']['DataSet']['Series'])
data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
              for obs in data['Obs']]
df = pd.DataFrame(data_list, columns=['date', 'value'])
df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
print(df)
title = f'VN Export AMT'
recentdt = df.index[-1].strftime('%B %Y')
recentval = round(df[-1], 1)
recent = f'Most recent: {recentdt}: {recentval}'
source = 'Source: IMF IFS'
plot = df.plot(title=title, colormap='Set1')
plot = plot.set_xlabel(f'{recent}; {source}')


# --------------Lending annualized interest rate Monthly - Active

# key = 'CompactData/IFS/M.VN.FILR_PA' # Lending interest rate
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN Lending interest rate'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')


# --------------Deposit annualized interest rate Monthly - Active

# key = 'CompactData/IFS/M.VN.FIDR_PA' # Deposit interest rate
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN Deposit interest rate'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')


# --------------T-Bill annualized rate Monthly

# key = 'CompactData/IFS/M.VN.FITB_PA' # T-Bill rate
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN T-Bill interest rate'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')


# --------------Labor force % change YoY

# key = 'CompactData/IFS/Q.VN.LLF_PE_PC_CP_A_PT' # Labor force % change YoY
# data = (requests.get(f'{url}{key}').json()
#         ['CompactData']['DataSet']['Series'])
# data_list = [[obs.get('@TIME_PERIOD'), obs.get('@OBS_VALUE')]
#               for obs in data['Obs']]
# df = pd.DataFrame(data_list, columns=['date', 'value'])
# df = df.set_index(pd.to_datetime(df['date']))['value'].astype('float')
# print(df)
# title = f'VN Labor force % change'
# recentdt = df.index[-1].strftime('%B %Y')
# recentval = round(df[-1], 1)
# recent = f'Most recent: {recentdt}: {recentval}'
# source = 'Source: IMF IFS'
# plot = df.plot(title=title, colormap='Set1')
# plot = plot.set_xlabel(f'{recent}; {source}')

sns.despine()
plt.tight_layout()
plt.show()




import requests
from bs4 import BeautifulSoup
import re
from datetime import datetime
import pandas as pd
import json


# ----------------------GET DATA HISTORICAL 10VNBY

url_10 = "https://www.worldgovernmentbonds.com/wp-admin/admin-ajax.php?action=jsonStoricoBond&area=58&dateRif=2099-12-31&durata=120&key=d1RHRzY4aE16dU9TaXRvSndPWVBEdz09"

response_10 = requests.get(url_10).text
data_10 = json.loads(response_10)  # Parse the JSON data directly
# print(data_dict)

# Convert to DataFrame
df_10 = pd.DataFrame.from_dict(data_10['quote'], orient='index', columns=['date', 'bond_10y'])

# Convert timestamp to readable date format
df_10['date'] = pd.to_datetime(df_10['date'], unit='ms')


# ----------------------GET DATA FORECAST 10VNBY


url_10f = ('http://www.worldgovernmentbonds.com/bond-forecast/vietnam/10-years/')
r_10f = requests.get(url_10f)
# print(r.text)

# Get time forecast
web_content_10f = BeautifulSoup(r_10f.text, 'lxml')
web_content_10f = web_content_10f.find('div', {"class" : 'w3-responsive'})
web_content_10f = web_content_10f.find('thead').text
# print(web_content)

# Use regular expression to find lines with dates in MMM YYYY format
pattern = r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4}'
dates_10f = re.findall(pattern, web_content_10f)

# Convert month-year strings to datetime objects with day set to 1
date_objects_10f = [datetime.strptime(date, '%b %Y') for date in dates_10f]

date_10f = []
# Print the converted date objects
for date_obj_10f in date_objects_10f:
    date_10f.append(date_obj_10f)

date_10f = pd.DataFrame({'date': date_10f})
# print(date)

# Get number forecast
web_number_10f = BeautifulSoup(r_10f.text, 'lxml')
web_number_10f = web_number_10f.find('div', {"class" : 'w3-responsive'})
web_number_10f = web_number_10f.find('tbody')
web_number_10f = web_number_10f.find('tr').text

# # Use regular expression to find lines with '%'
pattern = r'^\d+\.\d+%$'
lines_with_percent_10f = re.findall(pattern, web_number_10f, re.MULTILINE)

# Print the matching lines
bond_y_10f = []
for line in lines_with_percent_10f:
    bond_y_10f.append(line)

bond_y_10f = pd.DataFrame({'bond_10y': bond_y_10f})
# print(bond_y)

# Consolidate the two DataFrames into one
consolidated_df_10f = pd.concat([date_10f, bond_y_10f], axis=1)

# Remove the '%' symbol
consolidated_df_10f['bond_10y'] = consolidated_df_10f['bond_10y'].str.replace('%', '')

# Convert the 'bond_y' column to numeric
consolidated_df_10f['bond_10y'] = pd.to_numeric(consolidated_df_10f['bond_10y'])


# --------------------COMBINE DATAFRAME

df_combined_10f = pd.concat([df_10, consolidated_df_10f], ignore_index=True).dropna(subset=['bond_10y'])

# REMOVE DUPLICATE LIST
df_combined_10f = df_combined_10f.drop_duplicates(subset=['date'], keep='last')

# ----------------------GET DATA HISTORICAL 02VNBY

url_2 = "https://www.worldgovernmentbonds.com/wp-admin/admin-ajax.php?action=jsonStoricoBond&area=58&dateRif=2099-12-31&durata=24&key=dENuNGVDdERQdUh6ZEhqZTBOWnN5Zz09"

response_2 = requests.get(url_2).text
data_2 = json.loads(response_2)  # Parse the JSON data directly
# print(data_dict)

# Convert to DataFrame
df_2 = pd.DataFrame.from_dict(data_2['quote'], orient='index', columns=['date', 'bond_2y'])

# Convert timestamp to readable date format
df_2['date'] = pd.to_datetime(df_2['date'], unit='ms')


# ----------------------GET DATA FORECAST 10VNBY


url_2f = ('http://www.worldgovernmentbonds.com/bond-forecast/vietnam/2-years/')
r_2f = requests.get(url_2f)
# print(r.text)

# Get time forecast
web_content_2f = BeautifulSoup(r_2f.text, 'lxml')
web_content_2f = web_content_2f.find('div', {"class" : 'w3-responsive'})
web_content_2f = web_content_2f.find('thead').text
# print(web_content)

# Use regular expression to find lines with dates in MMM YYYY format
pattern = r'(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d{4}'
dates_2f = re.findall(pattern, web_content_2f)

# Convert month-year strings to datetime objects with day set to 1
date_objects_2f = [datetime.strptime(date, '%b %Y') for date in dates_2f]

date_2f = []
# Print the converted date objects
for date_obj_2f in date_objects_2f:
    date_2f.append(date_obj_2f)

date_2f = pd.DataFrame({'date': date_2f})
# print(date)

# Get number forecast
web_number_2f = BeautifulSoup(r_2f.text, 'lxml')
web_number_2f = web_number_2f.find('div', {"class" : 'w3-responsive'})
web_number_2f = web_number_2f.find('tbody')
web_number_2f = web_number_2f.find('tr').text

# # Use regular expression to find lines with '%'
pattern = r'^\d+\.\d+%$'
lines_with_percent_2f = re.findall(pattern, web_number_2f, re.MULTILINE)

# Print the matching lines
bond_y_2f = []
for line in lines_with_percent_2f:
    bond_y_2f.append(line)

bond_y_2f = pd.DataFrame({'bond_2y': bond_y_2f})
# print(bond_y)

# Consolidate the two DataFrames into one
consolidated_df_2f = pd.concat([date_2f, bond_y_2f], axis=1)

# Remove the '%' symbol
consolidated_df_2f['bond_2y'] = consolidated_df_2f['bond_2y'].str.replace('%', '')

# Convert the 'bond_y' column to numeric
consolidated_df_2f['bond_2y'] = pd.to_numeric(consolidated_df_2f['bond_2y'])


# --------------------COMBINE DATAFRAME

df_combined_2f = pd.concat([df_2, consolidated_df_2f], ignore_index=True).dropna(subset=['bond_2y'])

# REMOVE DUPLICATE LIST
df_combined_2f = df_combined_2f.drop_duplicates(subset=['date'], keep='last')

# JOIN 2 DATAFRAME
df_combined = pd.merge(df_combined_10f, df_combined_2f, how="left"\
              , left_on=['date']\
              , right_on=['date']\
              , validate="1:1")
    
    
# Print the consolidated DataFrame
print(df_combined)
df_combined.to_csv("sample1.csv")


#---------------------------------------------------------------- GET USDVND

import pandas as pd
from pycoingecko import CoinGeckoAPI

cg = CoinGeckoAPI()

# Get a list of all supported coins
coins_list = cg.get_coins_list()


# Filter coins based on symbol
coins_list = filter(lambda coin: coin['id'] in ["usd"], coins_list)
# coin_id = pd.DataFrame(coins_list['id'])
# print(pd.DataFrame(coins_list))
# pd.DataFrame(coins_list).to_csv("vnd_usd_exchange_rate.csv")

# Initialize an empty list to store OHLC data
all_coin_data = []

# Loop through each coin
for coin in coins_list:
    coin_id = coin['id']
    coin_symbol = coin['symbol']

    # Get OHLC data for the past 14 days (adjust as needed)
    ohlc = cg.get_coin_ohlc_by_id(id=coin_id, vs_currency='vnd', days='365')

    # Create a dataframe for the coin's OHLC data
    ohlc_df = pd.DataFrame(ohlc, columns=["date", "open", "high", "low", "close"])
    ohlc_df["date"] = pd.to_datetime(ohlc_df["date"], unit="ms")
    ohlc_df["symbol"] = coin_symbol
    # print(ohlc_df)

    # Append to the list of all coin data
    all_coin_data.append(ohlc_df)

# Concatenate dataframes for all coins
result_df = pd.concat(all_coin_data, ignore_index=True)

result_df.to_csv("sample.csv")

# Print the first few rows of the combined dataframe
print(result_df.head())
